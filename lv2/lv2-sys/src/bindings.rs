/* automatically generated by rust-bindgen */

pub const LV2_CORE_URI: &'static [u8; 29usize] = b"http://lv2plug.in/ns/lv2core\0";
pub const LV2_CORE_PREFIX: &'static [u8; 30usize] = b"http://lv2plug.in/ns/lv2core#\0";
pub const LV2_CORE__AllpassPlugin: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#AllpassPlugin\0";
pub const LV2_CORE__AmplifierPlugin: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/lv2core#AmplifierPlugin\0";
pub const LV2_CORE__AnalyserPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#AnalyserPlugin\0";
pub const LV2_CORE__AudioPort: &'static [u8; 39usize] = b"http://lv2plug.in/ns/lv2core#AudioPort\0";
pub const LV2_CORE__BandpassPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#BandpassPlugin\0";
pub const LV2_CORE__CVPort: &'static [u8; 36usize] = b"http://lv2plug.in/ns/lv2core#CVPort\0";
pub const LV2_CORE__ChorusPlugin: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#ChorusPlugin\0";
pub const LV2_CORE__CombPlugin: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/lv2core#CombPlugin\0";
pub const LV2_CORE__CompressorPlugin: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/lv2core#CompressorPlugin\0";
pub const LV2_CORE__ConstantPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#ConstantPlugin\0";
pub const LV2_CORE__ControlPort: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/lv2core#ControlPort\0";
pub const LV2_CORE__ConverterPlugin: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/lv2core#ConverterPlugin\0";
pub const LV2_CORE__DelayPlugin: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/lv2core#DelayPlugin\0";
pub const LV2_CORE__DistortionPlugin: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/lv2core#DistortionPlugin\0";
pub const LV2_CORE__DynamicsPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#DynamicsPlugin\0";
pub const LV2_CORE__EQPlugin: &'static [u8; 38usize] = b"http://lv2plug.in/ns/lv2core#EQPlugin\0";
pub const LV2_CORE__EnvelopePlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#EnvelopePlugin\0";
pub const LV2_CORE__ExpanderPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#ExpanderPlugin\0";
pub const LV2_CORE__ExtensionData: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#ExtensionData\0";
pub const LV2_CORE__Feature: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#Feature\0";
pub const LV2_CORE__FilterPlugin: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#FilterPlugin\0";
pub const LV2_CORE__FlangerPlugin: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#FlangerPlugin\0";
pub const LV2_CORE__FunctionPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#FunctionPlugin\0";
pub const LV2_CORE__GatePlugin: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/lv2core#GatePlugin\0";
pub const LV2_CORE__GeneratorPlugin: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/lv2core#GeneratorPlugin\0";
pub const LV2_CORE__HighpassPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#HighpassPlugin\0";
pub const LV2_CORE__InputPort: &'static [u8; 39usize] = b"http://lv2plug.in/ns/lv2core#InputPort\0";
pub const LV2_CORE__InstrumentPlugin: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/lv2core#InstrumentPlugin\0";
pub const LV2_CORE__LimiterPlugin: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#LimiterPlugin\0";
pub const LV2_CORE__LowpassPlugin: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#LowpassPlugin\0";
pub const LV2_CORE__MixerPlugin: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/lv2core#MixerPlugin\0";
pub const LV2_CORE__ModulatorPlugin: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/lv2core#ModulatorPlugin\0";
pub const LV2_CORE__MultiEQPlugin: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#MultiEQPlugin\0";
pub const LV2_CORE__OscillatorPlugin: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/lv2core#OscillatorPlugin\0";
pub const LV2_CORE__OutputPort: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/lv2core#OutputPort\0";
pub const LV2_CORE__ParaEQPlugin: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#ParaEQPlugin\0";
pub const LV2_CORE__PhaserPlugin: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#PhaserPlugin\0";
pub const LV2_CORE__PitchPlugin: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/lv2core#PitchPlugin\0";
pub const LV2_CORE__Plugin: &'static [u8; 36usize] = b"http://lv2plug.in/ns/lv2core#Plugin\0";
pub const LV2_CORE__PluginBase: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/lv2core#PluginBase\0";
pub const LV2_CORE__Point: &'static [u8; 35usize] = b"http://lv2plug.in/ns/lv2core#Point\0";
pub const LV2_CORE__Port: &'static [u8; 34usize] = b"http://lv2plug.in/ns/lv2core#Port\0";
pub const LV2_CORE__PortProperty: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#PortProperty\0";
pub const LV2_CORE__Resource: &'static [u8; 38usize] = b"http://lv2plug.in/ns/lv2core#Resource\0";
pub const LV2_CORE__ReverbPlugin: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#ReverbPlugin\0";
pub const LV2_CORE__ScalePoint: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/lv2core#ScalePoint\0";
pub const LV2_CORE__SimulatorPlugin: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/lv2core#SimulatorPlugin\0";
pub const LV2_CORE__SpatialPlugin: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#SpatialPlugin\0";
pub const LV2_CORE__Specification: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#Specification\0";
pub const LV2_CORE__SpectralPlugin: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#SpectralPlugin\0";
pub const LV2_CORE__UtilityPlugin: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#UtilityPlugin\0";
pub const LV2_CORE__WaveshaperPlugin: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/lv2core#WaveshaperPlugin\0";
pub const LV2_CORE__appliesTo: &'static [u8; 39usize] = b"http://lv2plug.in/ns/lv2core#appliesTo\0";
pub const LV2_CORE__binary: &'static [u8; 36usize] = b"http://lv2plug.in/ns/lv2core#binary\0";
pub const LV2_CORE__connectionOptional: &'static [u8; 48usize] =
    b"http://lv2plug.in/ns/lv2core#connectionOptional\0";
pub const LV2_CORE__control: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#control\0";
pub const LV2_CORE__default: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#default\0";
pub const LV2_CORE__designation: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/lv2core#designation\0";
pub const LV2_CORE__documentation: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#documentation\0";
pub const LV2_CORE__enumeration: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/lv2core#enumeration\0";
pub const LV2_CORE__extensionData: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#extensionData\0";
pub const LV2_CORE__freeWheeling: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#freeWheeling\0";
pub const LV2_CORE__hardRTCapable: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#hardRTCapable\0";
pub const LV2_CORE__inPlaceBroken: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/lv2core#inPlaceBroken\0";
pub const LV2_CORE__index: &'static [u8; 35usize] = b"http://lv2plug.in/ns/lv2core#index\0";
pub const LV2_CORE__integer: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#integer\0";
pub const LV2_CORE__isLive: &'static [u8; 36usize] = b"http://lv2plug.in/ns/lv2core#isLive\0";
pub const LV2_CORE__latency: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#latency\0";
pub const LV2_CORE__maximum: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#maximum\0";
pub const LV2_CORE__microVersion: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#microVersion\0";
pub const LV2_CORE__minimum: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#minimum\0";
pub const LV2_CORE__minorVersion: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#minorVersion\0";
pub const LV2_CORE__name: &'static [u8; 34usize] = b"http://lv2plug.in/ns/lv2core#name\0";
pub const LV2_CORE__optionalFeature: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/lv2core#optionalFeature\0";
pub const LV2_CORE__port: &'static [u8; 34usize] = b"http://lv2plug.in/ns/lv2core#port\0";
pub const LV2_CORE__portProperty: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/lv2core#portProperty\0";
pub const LV2_CORE__project: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#project\0";
pub const LV2_CORE__prototype: &'static [u8; 39usize] = b"http://lv2plug.in/ns/lv2core#prototype\0";
pub const LV2_CORE__reportsLatency: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/lv2core#reportsLatency\0";
pub const LV2_CORE__requiredFeature: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/lv2core#requiredFeature\0";
pub const LV2_CORE__sampleRate: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/lv2core#sampleRate\0";
pub const LV2_CORE__scalePoint: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/lv2core#scalePoint\0";
pub const LV2_CORE__symbol: &'static [u8; 36usize] = b"http://lv2plug.in/ns/lv2core#symbol\0";
pub const LV2_CORE__toggled: &'static [u8; 37usize] = b"http://lv2plug.in/ns/lv2core#toggled\0";
pub const LV2_ATOM_URI: &'static [u8; 30usize] = b"http://lv2plug.in/ns/ext/atom\0";
pub const LV2_ATOM_PREFIX: &'static [u8; 31usize] = b"http://lv2plug.in/ns/ext/atom#\0";
pub const LV2_ATOM__Atom: &'static [u8; 35usize] = b"http://lv2plug.in/ns/ext/atom#Atom\0";
pub const LV2_ATOM__AtomPort: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/atom#AtomPort\0";
pub const LV2_ATOM__Blank: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/atom#Blank\0";
pub const LV2_ATOM__Bool: &'static [u8; 35usize] = b"http://lv2plug.in/ns/ext/atom#Bool\0";
pub const LV2_ATOM__Chunk: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/atom#Chunk\0";
pub const LV2_ATOM__Double: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/atom#Double\0";
pub const LV2_ATOM__Event: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/atom#Event\0";
pub const LV2_ATOM__Float: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/atom#Float\0";
pub const LV2_ATOM__Int: &'static [u8; 34usize] = b"http://lv2plug.in/ns/ext/atom#Int\0";
pub const LV2_ATOM__Literal: &'static [u8; 38usize] = b"http://lv2plug.in/ns/ext/atom#Literal\0";
pub const LV2_ATOM__Long: &'static [u8; 35usize] = b"http://lv2plug.in/ns/ext/atom#Long\0";
pub const LV2_ATOM__Number: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/atom#Number\0";
pub const LV2_ATOM__Object: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/atom#Object\0";
pub const LV2_ATOM__Path: &'static [u8; 35usize] = b"http://lv2plug.in/ns/ext/atom#Path\0";
pub const LV2_ATOM__Property: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/atom#Property\0";
pub const LV2_ATOM__Resource: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/atom#Resource\0";
pub const LV2_ATOM__Sequence: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/atom#Sequence\0";
pub const LV2_ATOM__Sound: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/atom#Sound\0";
pub const LV2_ATOM__String: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/atom#String\0";
pub const LV2_ATOM__Tuple: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/atom#Tuple\0";
pub const LV2_ATOM__URI: &'static [u8; 34usize] = b"http://lv2plug.in/ns/ext/atom#URI\0";
pub const LV2_ATOM__URID: &'static [u8; 35usize] = b"http://lv2plug.in/ns/ext/atom#URID\0";
pub const LV2_ATOM__Vector: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/atom#Vector\0";
pub const LV2_ATOM__atomTransfer: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/ext/atom#atomTransfer\0";
pub const LV2_ATOM__beatTime: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/atom#beatTime\0";
pub const LV2_ATOM__bufferType: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/atom#bufferType\0";
pub const LV2_ATOM__childType: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/ext/atom#childType\0";
pub const LV2_ATOM__eventTransfer: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/ext/atom#eventTransfer\0";
pub const LV2_ATOM__frameTime: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/ext/atom#frameTime\0";
pub const LV2_ATOM__supports: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/atom#supports\0";
pub const LV2_ATOM__timeUnit: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/atom#timeUnit\0";
pub const LV2_ATOM_REFERENCE_TYPE: u32 = 0;
pub const LV2_MIDI_URI: &'static [u8; 30usize] = b"http://lv2plug.in/ns/ext/midi\0";
pub const LV2_MIDI_PREFIX: &'static [u8; 31usize] = b"http://lv2plug.in/ns/ext/midi#\0";
pub const LV2_MIDI__ActiveSense: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/ext/midi#ActiveSense\0";
pub const LV2_MIDI__Aftertouch: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/midi#Aftertouch\0";
pub const LV2_MIDI__Bender: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/midi#Bender\0";
pub const LV2_MIDI__ChannelPressure: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/ext/midi#ChannelPressure\0";
pub const LV2_MIDI__Chunk: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/midi#Chunk\0";
pub const LV2_MIDI__Clock: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/midi#Clock\0";
pub const LV2_MIDI__Continue: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/midi#Continue\0";
pub const LV2_MIDI__Controller: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/midi#Controller\0";
pub const LV2_MIDI__MidiEvent: &'static [u8; 40usize] =
    b"http://lv2plug.in/ns/ext/midi#MidiEvent\0";
pub const LV2_MIDI__NoteOff: &'static [u8; 38usize] = b"http://lv2plug.in/ns/ext/midi#NoteOff\0";
pub const LV2_MIDI__NoteOn: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/midi#NoteOn\0";
pub const LV2_MIDI__ProgramChange: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/ext/midi#ProgramChange\0";
pub const LV2_MIDI__QuarterFrame: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/ext/midi#QuarterFrame\0";
pub const LV2_MIDI__Reset: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/midi#Reset\0";
pub const LV2_MIDI__SongPosition: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/ext/midi#SongPosition\0";
pub const LV2_MIDI__SongSelect: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/midi#SongSelect\0";
pub const LV2_MIDI__Start: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/midi#Start\0";
pub const LV2_MIDI__Stop: &'static [u8; 35usize] = b"http://lv2plug.in/ns/ext/midi#Stop\0";
pub const LV2_MIDI__SystemCommon: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/ext/midi#SystemCommon\0";
pub const LV2_MIDI__SystemExclusive: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/ext/midi#SystemExclusive\0";
pub const LV2_MIDI__SystemMessage: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/ext/midi#SystemMessage\0";
pub const LV2_MIDI__SystemRealtime: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/ext/midi#SystemRealtime\0";
pub const LV2_MIDI__Tick: &'static [u8; 35usize] = b"http://lv2plug.in/ns/ext/midi#Tick\0";
pub const LV2_MIDI__TuneRequest: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/ext/midi#TuneRequest\0";
pub const LV2_MIDI__VoiceMessage: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/ext/midi#VoiceMessage\0";
pub const LV2_MIDI__benderValue: &'static [u8; 42usize] =
    b"http://lv2plug.in/ns/ext/midi#benderValue\0";
pub const LV2_MIDI__binding: &'static [u8; 38usize] = b"http://lv2plug.in/ns/ext/midi#binding\0";
pub const LV2_MIDI__byteNumber: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/midi#byteNumber\0";
pub const LV2_MIDI__channel: &'static [u8; 38usize] = b"http://lv2plug.in/ns/ext/midi#channel\0";
pub const LV2_MIDI__chunk: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/midi#chunk\0";
pub const LV2_MIDI__controllerNumber: &'static [u8; 47usize] =
    b"http://lv2plug.in/ns/ext/midi#controllerNumber\0";
pub const LV2_MIDI__controllerValue: &'static [u8; 46usize] =
    b"http://lv2plug.in/ns/ext/midi#controllerValue\0";
pub const LV2_MIDI__noteNumber: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/midi#noteNumber\0";
pub const LV2_MIDI__pressure: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/midi#pressure\0";
pub const LV2_MIDI__programNumber: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/ext/midi#programNumber\0";
pub const LV2_MIDI__property: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/midi#property\0";
pub const LV2_MIDI__songNumber: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/midi#songNumber\0";
pub const LV2_MIDI__songPosition: &'static [u8; 43usize] =
    b"http://lv2plug.in/ns/ext/midi#songPosition\0";
pub const LV2_MIDI__status: &'static [u8; 37usize] = b"http://lv2plug.in/ns/ext/midi#status\0";
pub const LV2_MIDI__statusMask: &'static [u8; 41usize] =
    b"http://lv2plug.in/ns/ext/midi#statusMask\0";
pub const LV2_MIDI__velocity: &'static [u8; 39usize] = b"http://lv2plug.in/ns/ext/midi#velocity\0";
pub const LV2_UNITS_URI: &'static [u8; 38usize] = b"http://lv2plug.in/ns/extensions/units\0";
pub const LV2_UNITS_PREFIX: &'static [u8; 39usize] = b"http://lv2plug.in/ns/extensions/units#\0";
pub const LV2_UNITS__Conversion: &'static [u8; 49usize] =
    b"http://lv2plug.in/ns/extensions/units#Conversion\0";
pub const LV2_UNITS__Unit: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#Unit\0";
pub const LV2_UNITS__bar: &'static [u8; 42usize] = b"http://lv2plug.in/ns/extensions/units#bar\0";
pub const LV2_UNITS__beat: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#beat\0";
pub const LV2_UNITS__bpm: &'static [u8; 42usize] = b"http://lv2plug.in/ns/extensions/units#bpm\0";
pub const LV2_UNITS__cent: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#cent\0";
pub const LV2_UNITS__cm: &'static [u8; 41usize] = b"http://lv2plug.in/ns/extensions/units#cm\0";
pub const LV2_UNITS__coef: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#coef\0";
pub const LV2_UNITS__conversion: &'static [u8; 49usize] =
    b"http://lv2plug.in/ns/extensions/units#conversion\0";
pub const LV2_UNITS__db: &'static [u8; 41usize] = b"http://lv2plug.in/ns/extensions/units#db\0";
pub const LV2_UNITS__degree: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/extensions/units#degree\0";
pub const LV2_UNITS__frame: &'static [u8; 44usize] =
    b"http://lv2plug.in/ns/extensions/units#frame\0";
pub const LV2_UNITS__hz: &'static [u8; 41usize] = b"http://lv2plug.in/ns/extensions/units#hz\0";
pub const LV2_UNITS__inch: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#inch\0";
pub const LV2_UNITS__khz: &'static [u8; 42usize] = b"http://lv2plug.in/ns/extensions/units#khz\0";
pub const LV2_UNITS__km: &'static [u8; 41usize] = b"http://lv2plug.in/ns/extensions/units#km\0";
pub const LV2_UNITS__m: &'static [u8; 40usize] = b"http://lv2plug.in/ns/extensions/units#m\0";
pub const LV2_UNITS__mhz: &'static [u8; 42usize] = b"http://lv2plug.in/ns/extensions/units#mhz\0";
pub const LV2_UNITS__midiNote: &'static [u8; 47usize] =
    b"http://lv2plug.in/ns/extensions/units#midiNote\0";
pub const LV2_UNITS__mile: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#mile\0";
pub const LV2_UNITS__min: &'static [u8; 42usize] = b"http://lv2plug.in/ns/extensions/units#min\0";
pub const LV2_UNITS__mm: &'static [u8; 41usize] = b"http://lv2plug.in/ns/extensions/units#mm\0";
pub const LV2_UNITS__ms: &'static [u8; 41usize] = b"http://lv2plug.in/ns/extensions/units#ms\0";
pub const LV2_UNITS__name: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#name\0";
pub const LV2_UNITS__oct: &'static [u8; 42usize] = b"http://lv2plug.in/ns/extensions/units#oct\0";
pub const LV2_UNITS__pc: &'static [u8; 41usize] = b"http://lv2plug.in/ns/extensions/units#pc\0";
pub const LV2_UNITS__prefixConversion: &'static [u8; 55usize] =
    b"http://lv2plug.in/ns/extensions/units#prefixConversion\0";
pub const LV2_UNITS__render: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/extensions/units#render\0";
pub const LV2_UNITS__s: &'static [u8; 40usize] = b"http://lv2plug.in/ns/extensions/units#s\0";
pub const LV2_UNITS__semitone12TET: &'static [u8; 52usize] =
    b"http://lv2plug.in/ns/extensions/units#semitone12TET\0";
pub const LV2_UNITS__symbol: &'static [u8; 45usize] =
    b"http://lv2plug.in/ns/extensions/units#symbol\0";
pub const LV2_UNITS__unit: &'static [u8; 43usize] = b"http://lv2plug.in/ns/extensions/units#unit\0";
pub const LV2_URID_URI: &'static [u8; 30usize] = b"http://lv2plug.in/ns/ext/urid\0";
pub const LV2_URID_PREFIX: &'static [u8; 31usize] = b"http://lv2plug.in/ns/ext/urid#\0";
pub const LV2_URID__map: &'static [u8; 34usize] = b"http://lv2plug.in/ns/ext/urid#map\0";
pub const LV2_URID__unmap: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/urid#unmap\0";
pub const LV2_URID_MAP_URI: &'static [u8; 34usize] = b"http://lv2plug.in/ns/ext/urid#map\0";
pub const LV2_URID_UNMAP_URI: &'static [u8; 36usize] = b"http://lv2plug.in/ns/ext/urid#unmap\0";
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type LV2_Handle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LV2_Feature {
    pub URI: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__LV2_Feature() {
    assert_eq!(
        ::std::mem::size_of::<_LV2_Feature>(),
        16usize,
        concat!("Size of: ", stringify!(_LV2_Feature))
    );
    assert_eq!(
        ::std::mem::align_of::<_LV2_Feature>(),
        8usize,
        concat!("Alignment of ", stringify!(_LV2_Feature))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Feature>())).URI as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Feature),
            "::",
            stringify!(URI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Feature>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Feature),
            "::",
            stringify!(data)
        )
    );
}
pub type LV2_Feature = _LV2_Feature;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LV2_Descriptor {
    pub URI: *const ::std::os::raw::c_char,
    pub instantiate: ::std::option::Option<
        unsafe extern "C" fn(
            descriptor: *const _LV2_Descriptor,
            sample_rate: f64,
            bundle_path: *const ::std::os::raw::c_char,
            features: *const *const LV2_Feature,
        ) -> LV2_Handle,
    >,
    pub connect_port: ::std::option::Option<
        unsafe extern "C" fn(
            instance: LV2_Handle,
            port: u32,
            data_location: *mut ::std::os::raw::c_void,
        ),
    >,
    pub activate: ::std::option::Option<unsafe extern "C" fn(instance: LV2_Handle)>,
    pub run: ::std::option::Option<unsafe extern "C" fn(instance: LV2_Handle, sample_count: u32)>,
    pub deactivate: ::std::option::Option<unsafe extern "C" fn(instance: LV2_Handle)>,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(instance: LV2_Handle)>,
    pub extension_data: ::std::option::Option<
        unsafe extern "C" fn(uri: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout__LV2_Descriptor() {
    assert_eq!(
        ::std::mem::size_of::<_LV2_Descriptor>(),
        64usize,
        concat!("Size of: ", stringify!(_LV2_Descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<_LV2_Descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(_LV2_Descriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).URI as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(URI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).instantiate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(instantiate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).connect_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(connect_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).activate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(activate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).run as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).deactivate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(deactivate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).cleanup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_Descriptor>())).extension_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_Descriptor),
            "::",
            stringify!(extension_data)
        )
    );
}
pub type LV2_Descriptor = _LV2_Descriptor;
pub type LV2_Descriptor_Function =
    ::std::option::Option<unsafe extern "C" fn(index: u32) -> *const LV2_Descriptor>;
pub type LV2_Lib_Handle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Lib_Descriptor {
    pub handle: LV2_Lib_Handle,
    pub size: u32,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(handle: LV2_Lib_Handle)>,
    pub get_plugin: ::std::option::Option<
        unsafe extern "C" fn(handle: LV2_Lib_Handle, index: u32) -> *const LV2_Descriptor,
    >,
}
#[test]
fn bindgen_test_layout_LV2_Lib_Descriptor() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Lib_Descriptor>(),
        32usize,
        concat!("Size of: ", stringify!(LV2_Lib_Descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Lib_Descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(LV2_Lib_Descriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Lib_Descriptor>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Lib_Descriptor),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Lib_Descriptor>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Lib_Descriptor),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Lib_Descriptor>())).cleanup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Lib_Descriptor),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Lib_Descriptor>())).get_plugin as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Lib_Descriptor),
            "::",
            stringify!(get_plugin)
        )
    );
}
pub type LV2_Lib_Descriptor_Function = ::std::option::Option<
    unsafe extern "C" fn(
        bundle_path: *const ::std::os::raw::c_char,
        features: *const *const LV2_Feature,
    ) -> *const LV2_Lib_Descriptor,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom {
    pub size: u32,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_LV2_Atom() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Int {
    pub atom: LV2_Atom,
    pub body: i32,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Int() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Int>(),
        12usize,
        concat!("Size of: ", stringify!(LV2_Atom_Int))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Int>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Int>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Int),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Int>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Int),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Long {
    pub atom: LV2_Atom,
    pub body: i64,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Long() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Long>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Long))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Long>(),
        8usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Long))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Long>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Long),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Long>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Long),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Float {
    pub atom: LV2_Atom,
    pub body: f32,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Float() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Float>(),
        12usize,
        concat!("Size of: ", stringify!(LV2_Atom_Float))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Float>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Float))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Float>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Float),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Float>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Float),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Double {
    pub atom: LV2_Atom,
    pub body: f64,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Double() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Double>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Double))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Double>(),
        8usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Double))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Double>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Double),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Double>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Double),
            "::",
            stringify!(body)
        )
    );
}
pub type LV2_Atom_Bool = LV2_Atom_Int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_URID {
    pub atom: LV2_Atom,
    pub body: u32,
}
#[test]
fn bindgen_test_layout_LV2_Atom_URID() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_URID>(),
        12usize,
        concat!("Size of: ", stringify!(LV2_Atom_URID))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_URID>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_URID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_URID>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_URID),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_URID>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_URID),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_String {
    pub atom: LV2_Atom,
}
#[test]
fn bindgen_test_layout_LV2_Atom_String() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_String>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom_String))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_String>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_String))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_String>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_String),
            "::",
            stringify!(atom)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Literal_Body {
    pub datatype: u32,
    pub lang: u32,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Literal_Body() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Literal_Body>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom_Literal_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Literal_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Literal_Body))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Literal_Body>())).datatype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Literal_Body),
            "::",
            stringify!(datatype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Literal_Body>())).lang as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Literal_Body),
            "::",
            stringify!(lang)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Literal {
    pub atom: LV2_Atom,
    pub body: LV2_Atom_Literal_Body,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Literal() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Literal>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Literal))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Literal>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Literal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Literal>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Literal),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Literal>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Literal),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Tuple {
    pub atom: LV2_Atom,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Tuple() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Tuple>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom_Tuple))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Tuple>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Tuple))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Tuple>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Tuple),
            "::",
            stringify!(atom)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Vector_Body {
    pub child_size: u32,
    pub child_type: u32,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Vector_Body() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Vector_Body>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom_Vector_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Vector_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Vector_Body))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Vector_Body>())).child_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Vector_Body),
            "::",
            stringify!(child_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Vector_Body>())).child_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Vector_Body),
            "::",
            stringify!(child_type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Vector {
    pub atom: LV2_Atom,
    pub body: LV2_Atom_Vector_Body,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Vector() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Vector>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Vector))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Vector>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Vector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Vector>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Vector),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Vector>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Vector),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Property_Body {
    pub key: u32,
    pub context: u32,
    pub value: LV2_Atom,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Property_Body() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Property_Body>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Property_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Property_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Property_Body))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Property_Body>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Property_Body),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Property_Body>())).context as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Property_Body),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Property_Body>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Property_Body),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Property {
    pub atom: LV2_Atom,
    pub body: LV2_Atom_Property_Body,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Property() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Property>(),
        24usize,
        concat!("Size of: ", stringify!(LV2_Atom_Property))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Property>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Property))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Property>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Property),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Property>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Property),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Object_Body {
    pub id: u32,
    pub otype: u32,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Object_Body() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Object_Body>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom_Object_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Object_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Object_Body))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Object_Body>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Object_Body),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Object_Body>())).otype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Object_Body),
            "::",
            stringify!(otype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Object {
    pub atom: LV2_Atom,
    pub body: LV2_Atom_Object_Body,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Object() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Object>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Object))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Object>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Object>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Object),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Object>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Object),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Event {
    pub time: LV2_Atom_Event__bindgen_ty_1,
    pub body: LV2_Atom,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LV2_Atom_Event__bindgen_ty_1 {
    pub frames: i64,
    pub beats: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Event__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Event__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom_Event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LV2_Atom_Event__bindgen_ty_1>())).frames as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Event__bindgen_ty_1),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LV2_Atom_Event__bindgen_ty_1>())).beats as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Event__bindgen_ty_1),
            "::",
            stringify!(beats)
        )
    );
}
#[test]
fn bindgen_test_layout_LV2_Atom_Event() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Event>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Event))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Event>(),
        8usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Event>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Event),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Event>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Event),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Sequence_Body {
    pub unit: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Sequence_Body() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Sequence_Body>(),
        8usize,
        concat!("Size of: ", stringify!(LV2_Atom_Sequence_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Sequence_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Sequence_Body))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Sequence_Body>())).unit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Sequence_Body),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Sequence_Body>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Sequence_Body),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LV2_Atom_Sequence {
    pub atom: LV2_Atom,
    pub body: LV2_Atom_Sequence_Body,
}
#[test]
fn bindgen_test_layout_LV2_Atom_Sequence() {
    assert_eq!(
        ::std::mem::size_of::<LV2_Atom_Sequence>(),
        16usize,
        concat!("Size of: ", stringify!(LV2_Atom_Sequence))
    );
    assert_eq!(
        ::std::mem::align_of::<LV2_Atom_Sequence>(),
        4usize,
        concat!("Alignment of ", stringify!(LV2_Atom_Sequence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Sequence>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Sequence),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LV2_Atom_Sequence>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LV2_Atom_Sequence),
            "::",
            stringify!(body)
        )
    );
}
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_INVALID: LV2_Midi_Message_Type = 0;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_NOTE_OFF: LV2_Midi_Message_Type = 128;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_NOTE_ON: LV2_Midi_Message_Type = 144;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_NOTE_PRESSURE: LV2_Midi_Message_Type = 160;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_CONTROLLER: LV2_Midi_Message_Type = 176;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_PGM_CHANGE: LV2_Midi_Message_Type = 192;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_CHANNEL_PRESSURE: LV2_Midi_Message_Type = 208;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_BENDER: LV2_Midi_Message_Type = 224;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_SYSTEM_EXCLUSIVE: LV2_Midi_Message_Type = 240;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_MTC_QUARTER: LV2_Midi_Message_Type = 241;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_SONG_POS: LV2_Midi_Message_Type = 242;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_SONG_SELECT: LV2_Midi_Message_Type = 243;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_TUNE_REQUEST: LV2_Midi_Message_Type = 246;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_CLOCK: LV2_Midi_Message_Type = 248;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_START: LV2_Midi_Message_Type = 250;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_CONTINUE: LV2_Midi_Message_Type = 251;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_STOP: LV2_Midi_Message_Type = 252;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_ACTIVE_SENSE: LV2_Midi_Message_Type = 254;
pub const LV2_Midi_Message_Type_LV2_MIDI_MSG_RESET: LV2_Midi_Message_Type = 255;
pub type LV2_Midi_Message_Type = u32;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_BANK: LV2_Midi_Controller = 0;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_MODWHEEL: LV2_Midi_Controller = 1;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_BREATH: LV2_Midi_Controller = 2;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_FOOT: LV2_Midi_Controller = 4;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_PORTAMENTO_TIME: LV2_Midi_Controller = 5;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_DATA_ENTRY: LV2_Midi_Controller = 6;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_MAIN_VOLUME: LV2_Midi_Controller = 7;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_BALANCE: LV2_Midi_Controller = 8;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_PAN: LV2_Midi_Controller = 10;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_EXPRESSION: LV2_Midi_Controller = 11;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_EFFECT1: LV2_Midi_Controller = 12;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_EFFECT2: LV2_Midi_Controller = 13;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_GENERAL_PURPOSE1: LV2_Midi_Controller = 16;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_GENERAL_PURPOSE2: LV2_Midi_Controller = 17;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_GENERAL_PURPOSE3: LV2_Midi_Controller = 18;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MSB_GENERAL_PURPOSE4: LV2_Midi_Controller = 19;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_BANK: LV2_Midi_Controller = 32;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_MODWHEEL: LV2_Midi_Controller = 33;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_BREATH: LV2_Midi_Controller = 34;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_FOOT: LV2_Midi_Controller = 36;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_PORTAMENTO_TIME: LV2_Midi_Controller = 37;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_DATA_ENTRY: LV2_Midi_Controller = 38;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_MAIN_VOLUME: LV2_Midi_Controller = 39;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_BALANCE: LV2_Midi_Controller = 40;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_PAN: LV2_Midi_Controller = 42;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_EXPRESSION: LV2_Midi_Controller = 43;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_EFFECT1: LV2_Midi_Controller = 44;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_EFFECT2: LV2_Midi_Controller = 45;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_GENERAL_PURPOSE1: LV2_Midi_Controller = 48;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_GENERAL_PURPOSE2: LV2_Midi_Controller = 49;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_GENERAL_PURPOSE3: LV2_Midi_Controller = 50;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LSB_GENERAL_PURPOSE4: LV2_Midi_Controller = 51;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SUSTAIN: LV2_Midi_Controller = 64;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_PORTAMENTO: LV2_Midi_Controller = 65;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SOSTENUTO: LV2_Midi_Controller = 66;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SOFT_PEDAL: LV2_Midi_Controller = 67;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LEGATO_FOOTSWITCH: LV2_Midi_Controller = 68;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_HOLD2: LV2_Midi_Controller = 69;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC1_SOUND_VARIATION: LV2_Midi_Controller = 70;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC2_TIMBRE: LV2_Midi_Controller = 71;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC3_RELEASE_TIME: LV2_Midi_Controller = 72;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC4_ATTACK_TIME: LV2_Midi_Controller = 73;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC5_BRIGHTNESS: LV2_Midi_Controller = 74;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC6: LV2_Midi_Controller = 75;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC7: LV2_Midi_Controller = 76;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC8: LV2_Midi_Controller = 77;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC9: LV2_Midi_Controller = 78;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_SC10: LV2_Midi_Controller = 79;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_GENERAL_PURPOSE5: LV2_Midi_Controller = 80;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_GENERAL_PURPOSE6: LV2_Midi_Controller = 81;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_GENERAL_PURPOSE7: LV2_Midi_Controller = 82;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_GENERAL_PURPOSE8: LV2_Midi_Controller = 83;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_PORTAMENTO_CONTROL: LV2_Midi_Controller = 84;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_E1_REVERB_DEPTH: LV2_Midi_Controller = 91;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_E2_TREMOLO_DEPTH: LV2_Midi_Controller = 92;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_E3_CHORUS_DEPTH: LV2_Midi_Controller = 93;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_E4_DETUNE_DEPTH: LV2_Midi_Controller = 94;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_E5_PHASER_DEPTH: LV2_Midi_Controller = 95;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_DATA_INCREMENT: LV2_Midi_Controller = 96;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_DATA_DECREMENT: LV2_Midi_Controller = 97;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_NRPN_LSB: LV2_Midi_Controller = 98;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_NRPN_MSB: LV2_Midi_Controller = 99;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_RPN_LSB: LV2_Midi_Controller = 100;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_RPN_MSB: LV2_Midi_Controller = 101;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_ALL_SOUNDS_OFF: LV2_Midi_Controller = 120;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_RESET_CONTROLLERS: LV2_Midi_Controller = 121;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_LOCAL_CONTROL_SWITCH: LV2_Midi_Controller = 122;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_ALL_NOTES_OFF: LV2_Midi_Controller = 123;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_OMNI_OFF: LV2_Midi_Controller = 124;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_OMNI_ON: LV2_Midi_Controller = 125;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MONO1: LV2_Midi_Controller = 126;
pub const LV2_Midi_Controller_LV2_MIDI_CTL_MONO2: LV2_Midi_Controller = 127;
pub type LV2_Midi_Controller = u32;
pub type LV2_URID_Map_Handle = *mut ::std::os::raw::c_void;
pub type LV2_URID_Unmap_Handle = *mut ::std::os::raw::c_void;
pub type LV2_URID = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LV2_URID_Map {
    pub handle: LV2_URID_Map_Handle,
    pub map: ::std::option::Option<
        unsafe extern "C" fn(
            handle: LV2_URID_Map_Handle,
            uri: *const ::std::os::raw::c_char,
        ) -> LV2_URID,
    >,
}
#[test]
fn bindgen_test_layout__LV2_URID_Map() {
    assert_eq!(
        ::std::mem::size_of::<_LV2_URID_Map>(),
        16usize,
        concat!("Size of: ", stringify!(_LV2_URID_Map))
    );
    assert_eq!(
        ::std::mem::align_of::<_LV2_URID_Map>(),
        8usize,
        concat!("Alignment of ", stringify!(_LV2_URID_Map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_URID_Map>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_URID_Map),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_URID_Map>())).map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_URID_Map),
            "::",
            stringify!(map)
        )
    );
}
pub type LV2_URID_Map = _LV2_URID_Map;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LV2_URID_Unmap {
    pub handle: LV2_URID_Unmap_Handle,
    pub unmap: ::std::option::Option<
        unsafe extern "C" fn(
            handle: LV2_URID_Unmap_Handle,
            urid: LV2_URID,
        ) -> *const ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout__LV2_URID_Unmap() {
    assert_eq!(
        ::std::mem::size_of::<_LV2_URID_Unmap>(),
        16usize,
        concat!("Size of: ", stringify!(_LV2_URID_Unmap))
    );
    assert_eq!(
        ::std::mem::align_of::<_LV2_URID_Unmap>(),
        8usize,
        concat!("Alignment of ", stringify!(_LV2_URID_Unmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_URID_Unmap>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_URID_Unmap),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LV2_URID_Unmap>())).unmap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_LV2_URID_Unmap),
            "::",
            stringify!(unmap)
        )
    );
}
pub type LV2_URID_Unmap = _LV2_URID_Unmap;
